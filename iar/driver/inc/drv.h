////////////////////////////////////////////////////////////////////////////////
/// @file     DRV.H
/// @author   AE Team
/// @version  v2.0.0
/// @date     2019-03-13
/// @brief    THIS FILE CONTAINS ALL THE FUNCTIONS PROTOTYPES FOR THE
///           DRIVER LAYER.
////////////////////////////////////////////////////////////////////////////////
/// @attention
///
/// THE EXISTING FIRMWARE IS ONLY FOR REFERENCE, WHICH IS DESIGNED TO PROVIDE
/// CUSTOMERS WITH CODING INFORMATION ABOUT THEIR PRODUCTS SO THEY CAN SAVE
/// TIME. THEREFORE, MINDMOTION SHALL NOT BE LIABLE FOR ANY DIRECT, INDIRECT OR
/// CONSEQUENTIAL DAMAGES ABOUT ANY CLAIMS ARISING OUT OF THE CONTENT OF SUCH
/// HARDWARE AND/OR THE USE OF THE CODING INFORMATION CONTAINED HEREIN IN
/// CONNECTION WITH PRODUCTS MADE BY CUSTOMERS.
///
/// <H2><CENTER>&COPY; COPYRIGHT 2018-2019 MINDMOTION </CENTER></H2>
////////////////////////////////////////////////////////////////////////////////

// Define to prevent recursive inclusion  --------------------------------------
#ifndef __DRV_H
#define __DRV_H

// Files includes  -------------------------------------------------------------
#include "types.h"

////////////////////////////////////////////////////////////////////////////////
/// @defgroup MM32_Driver_Layer
/// @brief MM32 driver Layer
/// @{

////////////////////////////////////////////////////////////////////////////////
/// @defgroup DRV
/// @{

////////////////////////////////////////////////////////////////////////////////
/// @defgroup DRV_Exported_Constants
/// @{

#define  INSTANCE_NUM       (sizeof(tbIpBase) / 4)

/// @}


////////////////////////////////////////////////////////////////////////////////
/// @defgroup DRV_Exported_Enumeration
/// @{


////////////////////////////////////////////////////////////////////////////////
/// @brief  The following enumerations are generated by the tool software
///         _MM32_fdp_utility.exe.
///         Users are not allowed to modify! Must be generated by tools!
////////////////////////////////////////////////////////////////////////////////
#define emIP_KEYBOARD   KEYBOARD_CreateFile
#define emIP_DISPLAY    DISPLAY_CreateFile
#define emIP_ADC        ADC_CreateFile
#define emIP_AES        AES_CreateFile
#define emIP_BKP        BKP_CreateFile
#define emIP_CAN        CAN_CreateFile
#define emIP_COMP       COMP_CreateFile
#define emIP_CRC        CRC_CreateFile
#define emIP_CRS        CRS_CreateFile
#define emIP_DAC        DAC_CreateFile
#define emIP_DIV        DIV_CreateFile
#define emIP_DMA        DMA_CreateFile
#define emIP_EXTI       EXTI_CreateFile
#define emIP_GPIO       GPIO_CreateFile
#define emIP_I2C        I2C_CreateFile
#define emIP_IWDG       IWDG_CreateFile
#define emIP_OPAMP      OPAMP_CreateFile
#define emIP_POWER      POWER_CreateFile
#define emIP_RCC        RCC_CreateFile
#define emIP_RTC        RTC_CreateFile
#define emIP_SPI        SPI_CreateFile
#define emIP_SQRT       SQRT_CreateFile
#define emIP_TIM        TIM_CreateFile
#define emIP_UART       UART_CreateFile
#define emIP_WWDG       WWDG_CreateFile
#define emIP_EEPROM     EEPROM_CreateFile
#define emIP_PROTECT    PROTECT_CreateFile


/*  --------------------------------------------------------------------
    The Start of EM_FILE enumerate definition
--------------------------------------------------------------------  */


////////////////////////////////////////////////////////////////////////////////
/// @brief Files of ADC enumerate definition.
/// @anchor EM_FILE_ADC
////////////////////////////////////////////////////////////////////////////////
typedef enum {
    emFILE_ADC1,
#if defined(__MM3N1) || defined(__MM0P1)
    emFILE_ADC2
#endif
} EM_FILE_ADC;

////////////////////////////////////////////////////////////////////////////////
/// @brief AES Mode enumerate definition
/// @anchor EM_FILE_AES
////////////////////////////////////////////////////////////////////////////////
typedef enum {
    emFILE_AES_ECB,                                 ///< AES ECB chaining mode
    emFILE_AES_CBC,                                 ///< AES CBC chaining mode
    emFILE_AES_CTR,                                 ///< AES CTR chaining mode
    emFILE_AES_CFB,                                 ///< AES CFB chaining mode
    emFILE_AES_OFB                                  ///< AES OFB chaining mode
} EM_FILE_AES;

////////////////////////////////////////////////////////////////////////////////
/// @brief Files of BKP enumerate definition.
/// @anchor EM_FILE_BKP
////////////////////////////////////////////////////////////////////////////////
typedef enum {
    emFILE_BKP
} EM_FILE_BKP;


////////////////////////////////////////////////////////////////////////////////
/// @brief CAN VORK Mode enumerate definition
/// @anchor EM_CAN_WORK_MODE
////////////////////////////////////////////////////////////////////////////////
typedef enum {
    emTriple_Sample,                            ///< CAN_ResetMode
    emSingle_Sample                             ///< CAN_ResetMode
} EM_CAN_SAMPLE;
////////////////////////////////////////////////////////////////////////////////
/// @brief CAN VORK Mode enumerate definition
/// @anchor EM_CAN_MODE
////////////////////////////////////////////////////////////////////////////////
typedef enum {
    emCAN_Basic,                            ///< CAN_ResetMode
    emCAN_Peli                              ///< CAN_ResetMode
} EM_CAN_Mode;

////////////////////////////////////////////////////////////////////////////////
/// @brief CAN VORK Mode enumerate definition
/// @anchor EM_CAN_WORK_MODE
////////////////////////////////////////////////////////////////////////////////
typedef enum {
    emCAN_SeftTestMode,                                 ///< CAN_SeftTestMode
    emCAN_ListenOnlyMode,                           ///< CAN_ListenOnlyMode
    emCAN_WorkMode
} EM_CAN_TEST_MODE;

////////////////////////////////////////////////////////////////////////////////
/// @brief CAN VORK Mode enumerate definition
/// @anchor EM_CAN_WORK_MODE
////////////////////////////////////////////////////////////////////////////////
typedef enum {
    emCAN_FilterMode_Singal,                        ///< CAN_FilterMode_Singal
    emCAN_FilterMode_Double                         ///< CAN_FilterMode_Double
} EM_CAN_FILTER_MODE;

////////////////////////////////////////////////////////////////////////////////
/// @brief Files of COMP enumerate definition.
/// @anchor EM_FILE_COMP
////////////////////////////////////////////////////////////////////////////////
typedef enum {
    emFILE_COMP1,
    emFILE_COMP2,
    emFILE_COMP3,
    emFILE_COMP4,
    emFILE_COMP5
} EM_FILE_COMP;

////////////////////////////////////////////////////////////////////////////////
/// @brief Files of CRC enumerate definition.
/// @anchor EM_FILE_CRC
////////////////////////////////////////////////////////////////////////////////
typedef enum {
    emFILE_CRC
} EM_FILE_CRC;

////////////////////////////////////////////////////////////////////////////////
/// @brief Files of CRS enumerate definition.
/// @anchor EM_FILE_CRS
////////////////////////////////////////////////////////////////////////////////
typedef enum {
    emFILE_CRS
} EM_FILE_CRS;

////////////////////////////////////////////////////////////////////////////////
/// @brief Files of CAN enumerate definition.
/// @anchor EM_FILE_CAN
////////////////////////////////////////////////////////////////////////////////
typedef enum {
    emFILE_CAN1
} EM_FILE_CAN;

////////////////////////////////////////////////////////////////////////////////
/// @brief Files of DAC channel enumerate definition.
/// @anchor EM_FILE_DAC
////////////////////////////////////////////////////////////////////////////////
typedef enum {
    emFILE_DAC_CH1,
    emFILE_DAC_CH2
} EM_FILE_DAC;

////////////////////////////////////////////////////////////////////////////////
/// @brief Files of DIV enumerate definition.
/// @anchor EM_FILE_DIV
////////////////////////////////////////////////////////////////////////////////
typedef enum {
    emFILE_DIV
} EM_FILE_DIV;

////////////////////////////////////////////////////////////////////////////////
/// @brief Files of DISPLAY enumerate definition.
/// @anchor EM_FILE_DISPLAY
////////////////////////////////////////////////////////////////////////////////
typedef enum {
    emFILE_DISPLAY
} EM_FILE_DISPLAY;

////////////////////////////////////////////////////////////////////////////////
/// @brief Files of DMA channel enumerate definition.
/// @anchor EM_FILE_DMA
////////////////////////////////////////////////////////////////////////////////
typedef enum {
    emFILE_DMA_CH1,
    emFILE_DMA_CH2,
    emFILE_DMA_CH3,
    emFILE_DMA_CH4,
    emFILE_DMA_CH5
#if defined (__MM3N1)
    ,
    emFILE_DMA_CH6,
    emFILE_DMA_CH7
#endif
} EM_FILE_DMA;

////////////////////////////////////////////////////////////////////////////////
/// @brief Files of EEPROM enumerate definition.
/// @anchor EM_FILE_EEPROM
////////////////////////////////////////////////////////////////////////////////
typedef enum {
    emFILE_EEPROM1,
    emFILE_EEPROM2,
    emFILE_EEPROM3,
    emFILE_EEPROM4
} EM_FILE_EEPROM;

////////////////////////////////////////////////////////////////////////////////
/// @brief Files of EXTI enumerate definition.
/// @anchor EM_FILE_EXTI
////////////////////////////////////////////////////////////////////////////////
typedef enum {
    emFILE_EXTI0,
    emFILE_EXTI1,
    emFILE_EXTI2,
    emFILE_EXTI3,
    emFILE_EXTI4,
    emFILE_EXTI5,
    emFILE_EXTI6,
    emFILE_EXTI7,
    emFILE_EXTI8,
    emFILE_EXTI9,
    emFILE_EXTI10,
    emFILE_EXTI11,
    emFILE_EXTI12,
    emFILE_EXTI13,
    emFILE_EXTI14,
    emFILE_EXTI15
} EM_FILE_EXTI;

////////////////////////////////////////////////////////////////////////////////
/// @brief Files of GPIO port enumerate definition.
/// @anchor EM_FILE_GPIO
////////////////////////////////////////////////////////////////////////////////
typedef enum {
    emFILE_GPIOA,
    emFILE_GPIOB,
    emFILE_GPIOC,
    emFILE_GPIOD,
    emFILE_GPIOE
} EM_FILE_GPIO;

////////////////////////////////////////////////////////////////////////////////
/// @brief Files of I2C enumerate definition.
/// @anchor EM_FILE_I2C
////////////////////////////////////////////////////////////////////////////////
typedef enum {
    emFILE_I2C1,
#if defined(__MM3N1) || defined(__MM3O1)
    emFILE_I2C2
#endif
} EM_FILE_I2C;

////////////////////////////////////////////////////////////////////////////////
/// @brief Files of IWDG enumerate definition.
/// @anchor EM_FILE_IWDG
////////////////////////////////////////////////////////////////////////////////
typedef enum {
    emFILE_IWDG
} EM_FILE_IWDG;

////////////////////////////////////////////////////////////////////////////////
/// @brief Files of KEYBOARD enumerate definition.
/// @anchor EM_FILE_KEYBOARD
////////////////////////////////////////////////////////////////////////////////
typedef enum {
    emFILE_KEYBOARD
} EM_FILE_KEYBOARD;

////////////////////////////////////////////////////////////////////////////////
/// @brief Files of OPAMP enumerate definition.
/// @anchor EM_FILE_OPAMP
////////////////////////////////////////////////////////////////////////////////
typedef enum {
    emFILE_OPAMP1,
    emFILE_OPAMP2,
    emFILE_OPAMP3,
    emFILE_OPAMP4
} EM_FILE_OPAMP;

////////////////////////////////////////////////////////////////////////////////
/// @brief Files of POWER enumerate definition.
/// @anchor EM_FILE_POWER
////////////////////////////////////////////////////////////////////////////////
typedef enum {
    emFILE_PVD_R,
    emFILE_PVD_F,
    emFILE_STOP,
    emFILE_SLEEP,
    emFILE_STANDBY
} EM_FILE_POWER;

////////////////////////////////////////////////////////////////////////////////
/// @brief Files of RCC enumerate definition.
/// @anchor EM_FILE_RCC
////////////////////////////////////////////////////////////////////////////////
typedef enum {
    emFILE_RCC
} EM_FILE_RCC;

////////////////////////////////////////////////////////////////////////////////
/// @brief Files of RTC enumerate definition.
/// @anchor EM_FILE_RTC
////////////////////////////////////////////////////////////////////////////////
typedef enum {
    emFILE_RTC
} EM_FILE_RTC;

////////////////////////////////////////////////////////////////////////////////
/// @brief Files of SPI enumerate definition.
/// @anchor EM_FILE_SPI
////////////////////////////////////////////////////////////////////////////////
typedef enum {
    emFILE_SPI1,                ///< SPI1
    emFILE_SPI2,                ///< SPI2
} EM_FILE_SPI;

////////////////////////////////////////////////////////////////////////////////
/// @brief Files of SQRT enumerate definition.
/// @anchor EM_FILE_SQRT
////////////////////////////////////////////////////////////////////////////////
typedef enum {
    emFILE_SQRT,                ///< SQRT
} EM_FILE_SQRT;

////////////////////////////////////////////////////////////////////////////////
/// @brief Files of TIM enumerate definition.
/// @anchor EM_FILE_TIM
////////////////////////////////////////////////////////////////////////////////
typedef enum {
    emFILE_TIM1,                ///< TIM1
    emFILE_TIM2,
    emFILE_TIM3,
    emFILE_TIM4,
    emFILE_TIM8     = 7,
    emFILE_TIM14    = 13,
    emFILE_TIM16    = 15,
    emFILE_TIM17    = 16
} EM_FILE_TIM;

////////////////////////////////////////////////////////////////////////////////
/// @brief Files of UART enumerate definition.
/// @anchor EM_FILE_UART
////////////////////////////////////////////////////////////////////////////////
typedef enum {
    emFILE_UART1,               ///< UART1
    emFILE_UART2,               ///<
#if defined(__MM3N1)
    emFILE_UART3
#endif
#if defined(__MM3O1)
    emFILE_UART3,
    emFILE_UART4,
    emFILE_UART5,
    emFILE_UART6,
    emFILE_UART7,
    emFILE_UART8
#endif
} EM_FILE_UART;

////////////////////////////////////////////////////////////////////////////////
/// @brief Files of WWDG enumerate definition.
/// @anchor EM_FILE_WWDG
////////////////////////////////////////////////////////////////////////////////
typedef enum {
    emFILE_WWDG
} EM_FILE_WWDG;

/*  --------------------------------------------------------------------
    The End  of EM_FILE enumerate definition
--------------------------------------------------------------------  */

////////////////////////////////////////////////////////////////////////////////
/// @brief DRV COMMON enumerate definition
/// @anchor EM_TYPE
////////////////////////////////////////////////////////////////////////////////
typedef enum {
    emTYPE_None,
    emTYPE_Polling,                         ///< Polling mode
    emTYPE_IT,                              ///< Interrupt mode
    emTYPE_DMA,                             ///< DMA mode
    emTYPE_Sync,                            ///< Synchronous mode
    emTYPE_ASync,                           ///< Asynchronous mode
    emTYPE_Block,                           ///< Blocking mode
    emTYPE_Non_Block                        ///< Noblocking mode
} EM_TYPE;

////////////////////////////////////////////////////////////////////////////////
/// @brief DRV COMMON enumerate definition
/// @anchor EM_BOOL
////////////////////////////////////////////////////////////////////////////////
typedef enum {
    emBOOL_Write,                           ///< Write direction
    emBOOL_Encrypt      =  emBOOL_Write,    ///< Encrypt mode
    emBOOL_Master       =  emBOOL_Write,    ///< master mode
    emBOOL_Send         =  emBOOL_Write,    ///< Send mode
    emBOOL_Read         = !emBOOL_Write,    ///< Read direction
    emBOOL_Decrypt      = !emBOOL_Write,    ///< Decrypt mode
    emBOOL_Receive      = !emBOOL_Write,    ///< Receive mode
    emBOOL_Slave        = !emBOOL_Write     ///< slave mode
} EM_BOOL;

////////////////////////////////////////////////////////////////////////////////
/// @brief DRV PRIORITY index enumerate definition
/// @anchor EM_PRIORITY
////////////////////////////////////////////////////////////////////////////////
typedef enum {
    emTRIGGER_Ext0 = 0,
    emTRIGGER_Ext1 = 1,
    emTRIGGER_Ext2 = 2,
    emTRIGGER_Ext3 = 3,
    emTRIGGER_Ext4 = 4,
    emTRIGGER_Ext5 = 5,
    emTRIGGER_Ext6 = 6,
    emTRIGGER_Ext7 = 7,
    emTRIGGER_Software
} EM_TRIGGER;


////////////////////////////////////////////////////////////////////////////////
/// @brief DRV PRIORITY index enumerate definition
/// @anchor EM_PRIORITY
////////////////////////////////////////////////////////////////////////////////
typedef enum {
    emPRI_Index0,
    emPRI_Index1,
    emPRI_Index2,
    emPRI_Index3,
    emPRI_Index4,
    emPRI_Index5,
    emPRI_Index6,
    emPRI_Index7,
    emPRI_Index8,
    emPRI_Index9,
    emPRI_Index10,
    emPRI_Index11,
    emPRI_Index12,
    emPRI_Index13,
    emPRI_Index14,
    emPRI_Index15
} EM_PRIORITY;

////////////////////////////////////////////////////////////////////////////////
/// @brief DRV COMMON enumerate definition
/// @anchor EM_GPIO_PORT
////////////////////////////////////////////////////////////////////////////////
typedef enum {
    emGPIOA,                                ///< GPIOA
    emGPIOB,                                ///< GPIOB
    emGPIOC,                                ///< GPIOC
    emGPIOD,                                ///< GPIOD
    emGPIOE,                                ///< GPIOE
    emGPIOF                                 ///< GPIOF
} EM_GPIO_PORT;

////////////////////////////////////////////////////////////////////////////////
/// @brief DRV COMMON return type enumerate definition
/// @anchor EM_RETURN
////////////////////////////////////////////////////////////////////////////////
typedef enum {
    emRETURN_Ready      =  0,               ///< Return ready status
    emRETURN_Fault      = -1,               ///< Return fault status
    emRETURN_NoAck      = -2,               ///< No act status
    emRETURN_Busy       = -3,               ///< Return busy status
    emRETURN_TimeOut    = -4                ///< Return timeOut status
} EM_RETURN;

////////////////////////////////////////////////////////////////////////////////
/// @brief DRV COMMON enumerate definition
/// @anchor EM_TXRX_MODE
////////////////////////////////////////////////////////////////////////////////
typedef enum {
    emTXRX_Tx,                              ///< Transmit type
    emTXRX_Rx,                              ///< Receice type
    emTXRX_TxRx,                            ///< Transmit and receice type
} EM_TXRX_MODE;

////////////////////////////////////////////////////////////////////////////////
/// @brief DRV COMMON Edge type enumerate definition
/// @anchor EM_EDGE
////////////////////////////////////////////////////////////////////////////////
typedef enum {
    emEDGE_Rising,                          ///< EDGE rising mode
    emEDGE_Falling,                         ///< EDGE falling mode
    emEDGE_RisingFalling                    ///< EDGE rising and falling mode
} EM_EDGE;

////////////////////////////////////////////////////////////////////////////////
/// @brief ADC Mode enumerate definition
/// @anchor EM_ADC_MODE
////////////////////////////////////////////////////////////////////////////////
//  ADC  ENUM  & DEFINE  ///////////////////////////////////////////////////////
typedef enum {
    emADC_Imm,                              ///< ADC Imm
    emADC_Scan,                             ///< ADC Scan
    emADC_Continue,                         ///< ADC Continue
    emADC_WindowComp                        ///< ADC Window Comp
} EM_ADC_MODE;

////////////////////////////////////////////////////////////////////////////////
/// @brief AES type enumerate definition
/// @anchor EM_AES_MODE
////////////////////////////////////////////////////////////////////////////////
typedef enum {
    emAES_BITS_128,                         ///< AES key length: 128
    emAES_BITS_192,                         ///< AES key length: 192
    emAES_BITS_256                          ///< AES key length: 256
} EM_AES_MODE;

////////////////////////////////////////////////////////////////////////////////
/// @brief I2C type enumerate definition
/// @anchor EM_I2C
////////////////////////////////////////////////////////////////////////////////
typedef enum {
    emI2C_MODE_Write,
    emI2C_MODE_Read,
    emI2C_MODE_WriteRead,
    emI2C_MODE_Search
} EM_I2C_MODE;

////////////////////////////////////////////////////////////////////////////////
/// @brief TIM Mode enumerate definition
/// @anchor EM_TIM_MODE
////////////////////////////////////////////////////////////////////////////////
typedef enum {
    emTIM_Encoder,                          ///< Encoder mode
    emTIM_PWM,                              ///< PWM mode
    emTIM_CapturePulse,                     ///< Capture Pulse mode
    emTIM_CapturePWM,                       ///< Capture PWM mode
    emTIM_OnePulse,
    emTIM_6Step,
    emTIM_Master,
    emTIM_Slave
    // support other mode next version...
} EM_TIM_MODE;

////////////////////////////////////////////////////////////////////////////////
/// @brief TIM Trigger Output enumerate definition
/// @anchor EM_TIM_TRGO
////////////////////////////////////////////////////////////////////////////////
typedef enum {
    emTIM_Reset,
    emTIM_Enable,
    emTIM_Update,
    emTIM_CC1,
    emTIM_OC1Ref,
    emTIM_OC2Ref,
    emTIM_OC3Ref,
    emTIM_OC4Ref
} EM_TIM_TRGO;

////////////////////////////////////////////////////////////////////////////////
/// @brief TIM Channel enumerate definition
/// @anchor EM_TIM_CH
////////////////////////////////////////////////////////////////////////////////
typedef enum {
    emTIM_CH1 = 0x01,
    emTIM_CH2 = 0x02,
    emTIM_CH3 = 0x04,
    emTIM_CH4 = 0x08,
    emTIM_CH5 = 0x10
} EM_TIM_CH;

////////////////////////////////////////////////////////////////////////////////
/// @brief DMA Mode enumerate definition
/// @anchor EM_DMA_MODE
////////////////////////////////////////////////////////////////////////////////
typedef enum {
    emDMA_MODE_Normal,                      ///< normal mode
    emDMA_MODE_Circular                     ///< circular mode
} EM_DMA_MODE;

////////////////////////////////////////////////////////////////////////////////
/// @brief RTC Mode enumerate definition
/// @anchor EM_RTC_MODE
////////////////////////////////////////////////////////////////////////////////
typedef enum {
    emRTC_TimeCounter,                      ///< RTC Time couner mode
    emRTC_AlarmCounter,                     ///< RTC Alarm couner mode
    emRTC_TimeCalendar,                     ///< RTC Alarm calendar mode
    emRTC_AlarmCalendar                     ///< RTC Alarm calendar mode
} EM_RTC_MODE;

////////////////////////////////////////////////////////////////////////////////
/// @brief FLASH Mode enumerate definition
/// @anchor EM_FLASH_MODE
////////////////////////////////////////////////////////////////////////////////
typedef enum {
    emFLASH_Protect,                        ///< FLASH PROTECT mode
    emFLASH_EEPROM                          ///< FLASH EEPROM mode
} EM_FLASH_MODE;

////////////////////////////////////////////////////////////////////////////////
/// @brief EXTI Mode enumerate definition
/// @anchor EM_EXTI_Mode
////////////////////////////////////////////////////////////////////////////////
typedef enum {
    emEXTI_IT,                              ///< EXTI Interrupt mode
    emEXTI_Event                            ///< EXTI Event mode
} EM_EXTI_MODE;

////////////////////////////////////////////////////////////////////////////////
/// @brief SPI MODE enumerate definition
/// @anchor EM_SPI_MODE
////////////////////////////////////////////////////////////////////////////////
typedef enum {
    emSPI_MODE_0,                           ///< The clock is low in idle state,  Data sampling starts from the first clock edge.  CPOL = 0, CPHA = 0
    emSPI_MODE_1,                           ///< The clock is low in idle state, Data sampling starts from the second clock edge.  CPOL = 0, CPHA = 1
    emSPI_MODE_2,                           ///< The clock is high in idle state, Data sampling starts from the second clock edge. CPOL = 1, CPHA = 1
    emSPI_MODE_3                            ///< The clock is high in idle state, Data sampling starts from the first clock edge.  CPOL = 1, CPHA = 0
} EM_SPI_MODE;



////////////////////////////////////////////////////////////////////////////////
/// @brief DMA Direction enumerate definition
/// @anchor EM_DMA_DIR
////////////////////////////////////////////////////////////////////////////////
typedef enum {
    emDMA_DIR_m2p,                          ///< Direction memory to peripheral.
    emDMA_DIR_p2m,                          ///< Direction peripheral to memory.
    emDMA_DIR_m2m                           ///< Direction memory to memory.
} EM_DMA_DIR;

////////////////////////////////////////////////////////////////////////////////
/// @brief DMA increase enumerate definition
/// @anchor EM_DMA_INCREASE
////////////////////////////////////////////////////////////////////////////////
typedef enum {
    emDMA_INC_Enable,                       ///< DMA Increase enable
    emDMA_INC_Disable                       ///< DMA Increase disable
} EM_DMA_INCREASE;

////////////////////////////////////////////////////////////////////////////////
/// @brief DMA BITS enumerate definition
/// @anchor EM_DMA_BITS
////////////////////////////////////////////////////////////////////////////////
typedef enum {
    emDMA_Bits_8,                           ///< 8 bit
    emDMA_Bits_16,                          ///< 16 bit
    emDMA_Bits_32                           ///< 32 bit
} EM_DMA_BITS;

////////////////////////////////////////////////////////////////////////////////
/// @brief DMA Priority Mode enumerate definition
/// @anchor EM_DMA_PRIORITY
////////////////////////////////////////////////////////////////////////////////
typedef enum {
    emDMA_PRI_Low,                          ///< low priority
    emDMA_PRI_Medium,                       ///< medium priority
    emDMA_PRI_High,                         ///< high priority
    emDMA_PRI_VeryHigh                      ///< veryHigh priority
} EM_DMA_PRIORITY;

////////////////////////////////////////////////////////////////////////////////
/// @brief UART parity enumerate definition
/// @anchor EM_UART_PARITY
////////////////////////////////////////////////////////////////////////////////
typedef enum {
    emUART_PARITY_None,                     ///< UART None Parity
    emUART_PARITY_Even,                     ///< UART Even Parity
    emUART_PARITY_Odd                       ///< UART Odd Parity
} EM_UART_PARITY;

////////////////////////////////////////////////////////////////////////////////
/// @brief CRS source enumerate definition
/// @anchor EM_CRS_SOURCE
////////////////////////////////////////////////////////////////////////////////
typedef enum {
    emCRS_GPIO,                             ///< GPIO source
    emCRS_USB                               ///< USB source
} EM_CRS_SOURCE;

/// @}

////////////////////////////////////////////////////////////////////////////////
/// @defgroup DRV_Exported_Types
/// @{

////////////////////////////////////////////////////////////////////////////////
/// @brief  HANDLE structure definition
////////////////////////////////////////////////////////////////////////////////
typedef struct {
    int*                instance;           ///< IP instance address
    s8                  idx;                ///< Instance index
    u8                  res;                ///< Reserved
    u16                 size;               ///< Instance Size
    int                 mode;               ///< File transmit mode
    int*                openFile;           ///< OpenFile Function point
    int*                closeFile;          ///< CloseFile Function point
    int*                readFile;           ///< ReadFile Function point
    int*                writeFile;          ///< WriteFile Function point
} tHandle, *HANDLE;

////////////////////////////////////////////////////////////////////////////////
/// @brief  Instance Prefix structure definition
////////////////////////////////////////////////////////////////////////////////
typedef struct {
    u32*                pBase;              ///< IP base address
    s8                  trueIdx;            ///< Virtual index;
    s8                  subIdx;             ///< Sub handle
} tPREFIX;

////////////////////////////////////////////////////////////////////////////////
/// @brief  ADC DCB structure definition
////////////////////////////////////////////////////////////////////////////////
typedef struct {
    s8                  hSub;               ///< Sub handle.
    EM_TYPE             type;               ///< polling, interrupt, dma
    EM_TYPE             sync;               ///< Sync, ASync
    u32                 cb;                 ///< adc callback
    EM_TRIGGER          trig;
    EM_ADC_MODE         mode;               ///< ADC mode: emADC_Imm, emADC_Scan, emADC_Continue, emADC_WindowComp
    u32                 chs;                ///< channel: 0~15
    bool                temp;               ///< Temperature measurement
    bool                vRef;               ///< Reference voltage
} tAPP_ADC_DCB;

////////////////////////////////////////////////////////////////////////////////
/// @brief  AES DCB structure definition
////////////////////////////////////////////////////////////////////////////////
typedef struct {
    s8                  hSub;               ///< AES Sub handle.
    EM_AES_MODE         bits;               ///< AES key size. 0:128 bit, 1:192 bit, 2:256 bit
    u8                  *key;               ///< The pointer to AES key.
    u8                  *iv;                ///< The pointer to AES initialization vector.
} tAPP_AES_DCB;

////////////////////////////////////////////////////////////////////////////////
/// @brief  BKP DCB structure definition
////////////////////////////////////////////////////////////////////////////////
typedef struct {
    s8                  hSub;                ///< BKP Sub handle.
} tAPP_BKP_DCB;

////////////////////////////////////////////////////////////////////////////////
/// @brief  COMP DCB structure definition
////////////////////////////////////////////////////////////////////////////////
typedef struct {
    s8                  hSub;               ///< Sub handle.
    EM_TYPE             type;               ///< use mode. Set as emTYPE_Polling, emTYPE_IT.
    EM_TYPE             sync;               ///< sync mode. Set as emTYPE_Sync, emTYPE_ASync.
    u32                 cb;                 ///< call back function.
    u8                  inm;                ///< InvertingInput;
    u8                  inp;                ///< NonInvertingInput;
    u8                  out;                ///< output selection
    u8                  pol;                ///< output polarity
    u8                  mode;               ///< mode
    u8                  crv;                ///< external reference voltage select
    u8                  src;                ///< external reference voltage source select
} tAPP_COMP_DCB;

////////////////////////////////////////////////////////////////////////////////
/// @brief  CRC DCB structure definition
////////////////////////////////////////////////////////////////////////////////
typedef struct {
    s8                  hSub;                ///< CRC Sub handle.
} tAPP_CRC_DCB;

////////////////////////////////////////////////////////////////////////////////
/// @brief  CRS DCB structure definition
////////////////////////////////////////////////////////////////////////////////
typedef struct {
    s8                  hSub;               ///< Sub handle.
    EM_EDGE             edge;               ///< polarity,
    EM_CRS_SOURCE       src;                ///< source,
    u32                 hsiFreq;            ///< HSI target frequency
    u32                 srcFreq;            ///< Source frequency
} tAPP_CRS_DCB;

////////////////////////////////////////////////////////////////////////////////
/// @brief  CAN DCB structure definition
////////////////////////////////////////////////////////////////////////////////
typedef struct {
    s8                  hSub;               ///< Sub handle,Set as emFILE_CAN1,emFILE_CAN1_PELI.
    EM_CAN_Mode         canType;            ///< emBasic,emPeli
    EM_TYPE             type;               ///< emTYPE_IT, emTYPE_Polling .
    EM_TYPE             sync;               ///< sync mode. Set as emTYPE_Sync, emTYPE_ASync.
    EM_TYPE             block;              ///< block mode.
    u32                 cbTx;               ///< tx call back function.
    u32                 cbRx;               ///< rx call back function.
    u32                 baudRate;           ///< baudRate
    u8                  sample;             ///<u8 sample
    EM_CAN_TEST_MODE    testMode;           ///< CAN_SeftTestMode,CAN_ListenOnlyMode.
    bool                remapEn;            ///< GPIO whether remap
    u8                  remapIdx;           ///< GPIO remap index
    u32                 id;                 ///< address
} tAPP_CAN_DCB;

////////////////////////////////////////////////////////////////////////////////
/// @brief  DAC DCB structure definition
////////////////////////////////////////////////////////////////////////////////
typedef struct {
    s8                  hSub;               ///< Sub handle.
    EM_TYPE             type;               ///< use mode. Set as emTYPE_Polling, emTYPE_IT, emTYPE_DMA.
    bool                trig;               ///< external hardware trigger enable: 0(Software trigger),1(Hardware trigger)
    u16                 wave;               ///< generated wave: 0(Not generated), 1(Noise), 2(Triangle)
} tAPP_DAC_DCB;

////////////////////////////////////////////////////////////////////////////////
/// @brief  DISPLAY DCB structure definition
////////////////////////////////////////////////////////////////////////////////
typedef struct {
    s8                  hSub;               ///< DISPLAY Sub handle.
} tAPP_DISPLAY_DCB;

////////////////////////////////////////////////////////////////////////////////
/// @brief  DIV DCB structure definition
////////////////////////////////////////////////////////////////////////////////
typedef struct {
    s8                  hSub;               ///< Sub handle.
    bool                usign;              ///<
    bool                zero;               ///<
} tAPP_DIV_DCB;

////////////////////////////////////////////////////////////////////////////////
/// @brief  DMA WRITE DCB structure definition
////////////////////////////////////////////////////////////////////////////////
typedef struct {
    u32 src;                                ///< source address
    u32 desti;                              ///< destinition address
} tAPP_DMA_WRITE_DCB;

////////////////////////////////////////////////////////////////////////////////
/// @brief  EEPROM DCB structure definition
////////////////////////////////////////////////////////////////////////////////
typedef struct {
    s8                  hSub;               ///< Sub handle.
    u32                 base;               ///< base address
    u16                 size;               ///< block size
    bool                erase;              ///< erase
} tAPP_EEPROM_DCB;

////////////////////////////////////////////////////////////////////////////////
/// @brief  EXTI DCB structure definition
////////////////////////////////////////////////////////////////////////////////
typedef struct {
    s8                  hSub;               ///< Sub handle.
    EM_TYPE             sync;               ///< Sync, ASync
    EM_GPIO_PORT        port;               ///< port
    EM_EXTI_MODE        mode;               ///< mode: Interrupt and Event
    EM_EDGE             edge;               ///< trigger: Rising, Falling and Rising_Falling
    u32                 cb;                 ///< Interrupt callback
} tAPP_EXTI_DCB;

////////////////////////////////////////////////////////////////////////////////
/// @brief  GPIO DCB structure definition
////////////////////////////////////////////////////////////////////////////////
typedef struct {
    int                 hSub;               ///< Sub handle.
    u16                 dir;                ///< direction, input or output
    u16                 mode;               ///< mode, can be Push-pull output or Open drain output, can be pull up or pull down accroding to dir
    u16                 state;              ///< in input mode, floating or pull up/down
    u16                 mask;               ///< 1:the pin need to be initialized, 0:the pin do not need operate
} tAPP_GPIO_DCB;

////////////////////////////////////////////////////////////////////////////////
/// @brief  I2C DCB structure definition
////////////////////////////////////////////////////////////////////////////////
typedef struct {
    s8                  hSub;               ///<  I2C Sub handle.
    EM_TYPE             type;               ///<  polling, interrupt, dma
    u32                 cbTx;               ///<  Tx callback function.
    u32                 cbRx;               ///<  Rx callback function.
    EM_TYPE             block;              ///<  Blocking, NonBlocking
    EM_TYPE             sync;               ///<  Sync, ASync
    u32                 timeOut;            ///<  If it is equal to zero, it does not time out
    u8                  ownaddr;            ///<  I2C Own Address
    bool                remapEn     :1;     ///<  0, 1
    u8                  remapIdx    :2;     ///<  remap index
    bool                fast        :1;     ///<  speed. Set as Standard or Fast
    bool                master      :1;     ///<  mode. Set as Master or Slave

    u8                  slave;              ///< Slave Device Address
    u16                 subAddr;            ///< SubAddress
    u8                  subSize;            ///< SubAddress size

} tAPP_I2C_DCB;

////////////////////////////////////////////////////////////////////////////////
/// @brief  IWDG DCB structure definition
////////////////////////////////////////////////////////////////////////////////
typedef struct {
    s8                  hSub;               ///< Sub handle.
    EM_TYPE             sync;               ///< Sync, ASync
    u32                 pres;               ///< Clock prescaler
    u16                 cnt;                ///< Counter value
    bool                itEn;
} tAPP_IWDG_DCB;

////////////////////////////////////////////////////////////////////////////////
/// @brief  KEYBOARD DCB structure definition
////////////////////////////////////////////////////////////////////////////////
typedef struct {
    s8                  hSub;               ///< KEYBOARD Sub handle.
} tAPP_KEYBOARD_DCB;

////////////////////////////////////////////////////////////////////////////////
/// @brief  OPAMP DCB structure definition
////////////////////////////////////////////////////////////////////////////////
typedef struct {
    s8                  hSub;               ///< Sub handle.
    EM_TYPE             type;               ///< use mode. Set as emTYPE_Polling, emTYPE_IT, emTYPE_DMA.
} tAPP_OPAMP_DCB;

////////////////////////////////////////////////////////////////////////////////
/// @brief  POWER DCB structure definition
///         Contain function PVD, SLEEP, STOP,STANDBY
////////////////////////////////////////////////////////////////////////////////
typedef struct {
    s8                  hSub;               ///< Sub handle.
    EM_TYPE             type;               ///< PWR use mode.
    EM_TYPE             sync;               ///< PWR sync mode. Set as emTYPE_Sync, emTYPE_ASync.
    u32                 cb1;                ///< Callback function.
    u32                 cb2;                ///< Callback function.
    u8                  voltage;            ///< PVD level selection voltage
    bool                enable;             ///< PVD enable
} tAPP_POWER_DCB;

////////////////////////////////////////////////////////////////////////////////
/// @brief  RCC DCB structure definition
////////////////////////////////////////////////////////////////////////////////
typedef struct {
    s8                  hSub;               ///< Sub handle.
    u8                  src;                ///< Selected MCO clock source
} tAPP_RCC_DCB;

////////////////////////////////////////////////////////////////////////////////
/// @brief  RTC DCB structure definition
////////////////////////////////////////////////////////////////////////////////
typedef struct {
    s8                  hSub;               ///< Sub handle.
    u32                 cbSecond;           ///< second interrupt call back function
    u32                 cbAlarm;            ///< alarm interrupt call back function
    EM_TYPE             sync;               ///< Sync, ASync
    u32                 second;             ///<
} tAPP_RTC_DCB;

////////////////////////////////////////////////////////////////////////////////
/// @brief  DIV DCB structure definition
////////////////////////////////////////////////////////////////////////////////
typedef struct {
    s8                  hSub;               ///< SPI Sub handle.

    EM_TYPE             type;               ///< SPI use mode. Set as emTYPE_Polling, emTYPE_IT, emTYPE_DMA.
    EM_TYPE             block;              ///< SPI block mode.

    EM_TYPE             sync;               ///< SPI sync mode. Set as emTYPE_Sync, emTYPE_ASync.
    u32                 cbTx;               ///< SPI transmiting callback function address
    u32                 cbRx;               ///< SPI receiving callback function address

//  u8                  dataWidth;          ///< SPI data width
    u16                 prescaler;          ///< Prescaler to control SPI clock frequency
    u32                 timeOut;

    bool                remapEn     :1;     ///< SPI GPIO whether remap
    u8                  remapIdx    :2;     ///< SPI remap index, 0..3
    u8                  mode        :2;     ///< mode 0:    CPOL = 0, CPHA = 0
                                            ///< mode 1:    CPOL = 0, CPHA = 1
                                            ///< mode 2:    CPOL = 1, CPHA = 1
                                            ///< mode 3:    CPOL = 1, CPHA = 0
    bool                hardNss     :1;     ///< NSS pin control, set as emNSS_Hard, emNSS_Soft
    bool                firstLsb    :1;     ///< First bit mode, set as emFirstBit_MSB, emFirstBit_LSB
    bool                master      :1;     ///< SPI operate mode, set as emSpiMode_Master, emSpiMode_Slave

    bool                useCmd      :1;     ///< Use Command, only Master mode
    u8                  cmd;                ///< Command
    u16                 para;               ///< parameter
    u8                  paraSize;           ///< parameter size

    bool                fastMode;
    u8                  protocol;
    u8                  command;
    u8                  parameter[4];
    u8                  parameterLength;
} tAPP_SPI_DCB;

////////////////////////////////////////////////////////////////////////////////
/// @brief  SQRT DCB structure definition
////////////////////////////////////////////////////////////////////////////////
typedef struct {
    s8                  hSub;               ///< SQRT Sub handle.
} tAPP_SQRT_DCB;

////////////////////////////////////////////////////////////////////////////////
/// @brief  TIM DCB structure definition
////////////////////////////////////////////////////////////////////////////////
typedef struct {
    s8                  hSub;               ///< Sub handle.
    EM_TYPE             type;               ///< null, interrupt, dma
    EM_TYPE             block;              ///< Blocking, NonBlocking
    EM_TYPE             sync;               ///< Sync, ASync
    EM_TIM_CH           ch;                 ///< Channel
    EM_TIM_TRGO         trgo;               ///< trigger output
    u32                 cntFreq;            ///< timer clock frequence
    u32                 period;             ///< 1 : 0xFFFF + 1
    u32                 pulse;              ///< CCRx value
    u32                 timeOut;            ///< If it is equal to zero, it does not time out
    u32                 cbUp;               ///< update event callback
    u32                 cbCc;               ///< ComCap event callback
    EM_TIM_MODE         mode;               ///< timer mode
    bool                remapEn     :1;     ///< 0, 1
    u8                  remapIdx    :3;     ///< remap index
} tAPP_TIM_DCB;

////////////////////////////////////////////////////////////////////////////////
/// @brief  UART DCB structure definition
////////////////////////////////////////////////////////////////////////////////
typedef struct {
    s8                  hSub;               ///< Sub handle.
    EM_TYPE             type;               ///< use mode. Set as emTYPE_Polling, emTYPE_IT, emTYPE_DMA.
    u32                 timeOut;            ///< If it is equal to zero, it does not time out.
    EM_TYPE             sync;               ///< sync mode. Set as emTYPE_Sync, emTYPE_ASync.
    EM_TYPE             block;              ///< block mode.
    u32                 cbTx;               ///< tx call back function.
    u32                 cbRx;               ///< rx call back function.

    u32                 baudRate;           ///< baudRate
    u8                  width;              ///< Word Length

    EM_UART_PARITY      parity;             ///< Parity
    EM_TXRX_MODE        modeTxRx;           ///< Tx/Rx mode.

    bool                remapEn     :1;     ///< GPIO whether remap
    u8                  remapIdx    :2;     ///< GPIO remap index
    u8                  stop        :2;     ///< Stop Bits
    u8                  hardFlow    :1;     ///< Hardware Flow Control

    bool                fitBaud     :1;     ///< Adaptive baud rate
    bool                fitMode     :2;     ///< Mode of Adaptive baud rate
    u8                  packet      :2;     ///< packet protocal

} tAPP_UART_DCB;

////////////////////////////////////////////////////////////////////////////////
/// @brief  DMA DCB structure definition
////////////////////////////////////////////////////////////////////////////////
typedef struct {
    s8                  hSub;               ///< Sub handle.
    EM_TYPE             block;              ///< Block mode.
    EM_DMA_DIR          dir;                ///< direction
    u32                 cb;                 ///< Callback function entry address
    EM_DMA_INCREASE     periphInc;          ///< Peripheral Increase mode
    EM_DMA_INCREASE     memInc;             ///< Memory Increase mode
    EM_DMA_BITS         periphBits;         ///< Peripheral Data Size
    EM_DMA_BITS         memBits;            ///< Memory Data Size
    EM_DMA_MODE         mode;               ///< circular normal mode
    EM_DMA_PRIORITY     priority;           ///< Priority
} tAPP_DMA_DCB;

////////////////////////////////////////////////////////////////////////////////
/// @brief  PROTECT DCB structure definition
////////////////////////////////////////////////////////////////////////////////
typedef struct {
    s8                  hSub;               ///< Sub handle.
    u32                 base;               ///< Base Address
} tAPP_PROTECT_DCB;

////////////////////////////////////////////////////////////////////////////////
/// @brief  WWDG DCB structure definition
////////////////////////////////////////////////////////////////////////////////
typedef struct {
    s8                  hSub;               ///< Sub handle.
    EM_TYPE             sync;               ///< Sync, ASync
    u32                 cb;                 ///< Interrupt callback
    u32                 pres;               ///< Clock prescaler
    u8                  cnt;                ///< Counter value
} tAPP_WWDG_DCB;


/// @}

////////////////////////////////////////////////////////////////////////////////
/// @defgroup DRV_Exported_Variables
/// @{
#ifdef _DRV_C_
#define GLOBAL


#else
#define GLOBAL extern


#endif


#undef GLOBAL
/// @}

////////////////////////////////////////////////////////////////////////////////
/// @defgroup DRV_Common Type Call Prototype
/// @{
typedef void (*fpCreateFile)(HANDLE handle);
typedef bool (*fpOpenFile)  (HANDLE handle, void* pDcb);
typedef void (*fpCloseFile) (HANDLE handle);
typedef int  (*fpReadFile)  (HANDLE handle, u8 hSub, u8* ptr, u16 count);
typedef int  (*fpWriteFile) (HANDLE handle, u8 hSub, u8* ptr, u16 count);

/// @}
////////////////////////////////////////////////////////////////////////////////
/// @defgroup DRV_Exported_Callback_Prototype
/// @{

typedef void (*fpADC)(u8* ptr, u16 len);
typedef void (*fpCAN)(u8 idx);
typedef void (*fpDMA)(u8 idx);
typedef void (*fpTIM)(u8 idx);
typedef void (*fpPVD)(void);
typedef void (*fpUART)(u8 idx);
typedef void (*fpSPI)(u8 idx);
typedef void (*fpEXTI)(u32 ev);
typedef void (*fpWWDG)(void);
typedef void (*fpIWDG)(void);
typedef void (*fpRTC)(u8 status);
typedef void (*fpI2C)(u8 idx);
typedef void (*fpCOMP)(u8 ch, bool val);

/// @}

////////////////////////////////////////////////////////////////////////////////
/// @defgroup DRV_Exported_Library_Function
/// @{


////////////////////////////////////////////////////////////////////////////////
/// @brief  The following enumerations are generated by the tool software
///         _MM32_fdp_utility.exe.
///         Users are not allowed to modify! Must be generated by tools!
////////////////////////////////////////////////////////////////////////////////
void KEYBOARD_CreateFile(HANDLE handle);
void DISPLAY_CreateFile(HANDLE handle);
void ADC_CreateFile(HANDLE handle);
void AES_CreateFile(HANDLE handle);
void BKP_CreateFile(HANDLE handle);
void CAN_CreateFile(HANDLE handle);
void COMP_CreateFile(HANDLE handle);
void CRC_CreateFile(HANDLE handle);
void CRS_CreateFile(HANDLE handle);
void DAC_CreateFile(HANDLE handle);
void DIV_CreateFile(HANDLE handle);
void DMA_CreateFile(HANDLE handle);
void EXTI_CreateFile(HANDLE handle);
void GPIO_CreateFile(HANDLE handle);
void I2C_CreateFile(HANDLE handle);
void IWDG_CreateFile(HANDLE handle);
void OPAMP_CreateFile(HANDLE handle);
void POWER_CreateFile(HANDLE handle);
void RCC_CreateFile(HANDLE handle);
void RTC_CreateFile(HANDLE handle);
void SPI_CreateFile(HANDLE handle);
void SQRT_CreateFile(HANDLE handle);
void TIM_CreateFile(HANDLE handle);
void UART_CreateFile(HANDLE handle);
void WWDG_CreateFile(HANDLE handle);
void EEPROM_CreateFile(HANDLE handle);
void PROTECT_CreateFile(HANDLE handle);


u32 inp(u32* addr);
u16 inp16(u16* addr);
u8  inp8(u8* addr);
void outp(u32* addr, u32 dat);
void outp16(u16* addr, u16 dat);
void outp8(u8* addr, u8 dat);

/// @}


////////////////////////////////////////////////////////////////////////////////
/// @defgroup DRV_COMMON_Exported_Functions
/// @{

s32 DRV_GetTick(void);
s8 DRV_FindTrueIdx(s8 sub, u8* ptr, u8 size, u8 num);
void DRV_CloseFileCommon(tPREFIX* pre, u16 size);
s8 DRV_OpenFileEntry(u32* itemBase, u8* itemAbsIdxIP,  s8 sub, u8* ptr, u16 size, u16 num);
bool DRV_OpenFileExit(HANDLE handle, int* ptr, s8 idx);

HANDLE CreateFile(fpCreateFile ip);
bool DeleteFile(HANDLE ip);
int OpenFile(HANDLE handle, void* pDcb);
void CloseFile(HANDLE handle);
int ReadFile(HANDLE handle, s8 hSub, u8* ptr, u16 len);
int WriteFile(HANDLE handle, s8 hSub, u8* ptr, u16 len);

s8 DRV_GetInstanceIndex(u8* ptr, u8 num, u16 size, s8 sub);

/// @}


/// @}

/// @}

////////////////////////////////////////////////////////////////////////////////
#endif /* __DRV_H */
////////////////////////////////////////////////////////////////////////////////
